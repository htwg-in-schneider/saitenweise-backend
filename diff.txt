diff --git a/pom.xml b/pom.xml
index 204e72d..f0f36df 100644
--- a/pom.xml
+++ b/pom.xml
@@ -38,11 +38,21 @@
 			<groupId>org.springframework.boot</groupId>
 			<artifactId>spring-boot-starter-web</artifactId>
 		</dependency>
-
 		<dependency>
 			<groupId>org.springframework.boot</groupId>
 			<artifactId>spring-boot-starter-test</artifactId>
 			<scope>test</scope>
+		</dependency>
+				<dependency>
+			<groupId>com.h2database</groupId>
+			<artifactId>h2</artifactId>
+			<scope>runtime</scope>
+		</dependency>
+		<dependency>
+			<groupId>org.mariadb.jdbc</groupId>
+			<artifactId>mariadb-java-client</artifactId>
+			<version>3.1.4</version>
+			<scope>runtime</scope>
 		</dependency>
 	</dependencies>
 
diff --git a/src/main/java/de/htwg/in/schneider/saitenweise/backend/controller/ProductController.java b/src/main/java/de/htwg/in/schneider/saitenweise/backend/controller/ProductController.java
index 9139780..306e91f 100644
--- a/src/main/java/de/htwg/in/schneider/saitenweise/backend/controller/ProductController.java
+++ b/src/main/java/de/htwg/in/schneider/saitenweise/backend/controller/ProductController.java
@@ -1,45 +1,24 @@
 package de.htwg.in.schneider.saitenweise.backend.controller;
 
+import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RestController;
 
-import de.htwg.in.schneider.saitenweise.backend.model.Category;
 import de.htwg.in.schneider.saitenweise.backend.model.Product;
+import de.htwg.in.schneider.saitenweise.backend.repository.ProductRepository;
 
-import java.util.Arrays;
 import java.util.List;
 
 @RestController
 @RequestMapping("/api/product")
 public class ProductController {
 
+    @Autowired
+    private ProductRepository productRepository;
+
     @GetMapping
     public List<Product> getProducts() {
-        Product violin = new Product();
-        violin.setId(1);
-        violin.setTitle("Geige Modell Paganini");
-        violin.setDescription("Eine hochwertige Geige, welche schon alle Konzerthäuser dieser Welt gesehen hat.");
-        violin.setCategory(Category.VIOLIN);
-        violin.setPrice(1200.00);
-        violin.setImageUrl("https://neshanjo.github.io/saitenweise-images/violin_pro.jpg");
-
-        Product doubleBass = new Product();
-        doubleBass.setId(2);
-        doubleBass.setTitle("Kontrabass Modell Maestro");
-        doubleBass.setDescription("Ein professioneller Kontrabass, für Klassik- und Jazz geeignet, optimal eingestellt.");
-        doubleBass.setCategory(Category.DOUBLE_BASS);
-        doubleBass.setPrice(3500.00);
-        doubleBass.setImageUrl("https://neshanjo.github.io/saitenweise-images/doublebass_pro.jpg");
-
-        Product strings = new Product();
-        strings.setId(3);
-        strings.setTitle("Geigensaiten Cat Screaming");
-        strings.setDescription("Extra dick und robust. Endlich können Sie sich gegen Ihre Katze wehren.");
-        strings.setCategory(Category.ACCESSORIES);
-        strings.setPrice(30.00);
-        strings.setImageUrl("https://neshanjo.github.io/saitenweise-images/accessory_violin_strings.jpg");
-
-        return Arrays.asList(violin, doubleBass, strings);
+        return productRepository.findAll();
     }
 }
\ No newline at end of file
diff --git a/src/main/java/de/htwg/in/schneider/saitenweise/backend/model/Product.java b/src/main/java/de/htwg/in/schneider/saitenweise/backend/model/Product.java
index 39125af..07c2f5b 100644
--- a/src/main/java/de/htwg/in/schneider/saitenweise/backend/model/Product.java
+++ b/src/main/java/de/htwg/in/schneider/saitenweise/backend/model/Product.java
@@ -1,11 +1,25 @@
 package de.htwg.in.schneider.saitenweise.backend.model;
 
+import jakarta.persistence.Entity;
+import jakarta.persistence.GeneratedValue;
+import jakarta.persistence.GenerationType;
+import jakarta.persistence.Id;
+import jakarta.persistence.EnumType;
+import jakarta.persistence.Enumerated;
+
+@Entity
 public class Product {
-    private long id;
+    @Id
+    @GeneratedValue(strategy = GenerationType.AUTO)
+    private Long id;
+
     private String title;
     private String description;
+
+    @Enumerated(EnumType.STRING)
     private Category category;
-    private double price;
+
+    private Double price;
     private String imageUrl;
 
     // Getters and setters
@@ -56,4 +70,16 @@ public class Product {
     public void setImageUrl(String imageUrl) {
         this.imageUrl = imageUrl;
     }
+
+    @Override
+    public String toString() {
+        return "Product{" +
+                "id=" + id +
+                ", title='" + title + '\'' +
+                ", description='" + description + '\'' +
+                ", category=" + category +
+                ", price=" + price +
+                ", imageUrl='" + imageUrl + '\'' +
+                '}';
+    }
 }
\ No newline at end of file
diff --git a/src/main/resources/application-prod.properties b/src/main/resources/application-prod.properties
index 016a432..04ca3a4 100644
--- a/src/main/resources/application-prod.properties
+++ b/src/main/resources/application-prod.properties
@@ -1,5 +1,5 @@
-spring.datasource.url=jdbc:mysql://localhost:3306/saitenweise
-spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
-spring.datasource.username=mysqluser
-spring.datasource.password=mysqlpassword
-spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect
\ No newline at end of file
+spring.datasource.url=jdbc:mariadb://localhost:3306/saitenweise
+spring.datasource.driver-class-name=org.mariadb.jdbc.Driver
+spring.datasource.username=user
+spring.datasource.password=deinpasswort
+spring.jpa.database-platform=org.hibernate.dialect.MariaDBDialect
\ No newline at end of file
diff --git a/src/main/resources/application.properties b/src/main/resources/application.properties
index 450ed83..5ea4ae5 100644
--- a/src/main/resources/application.properties
+++ b/src/main/resources/application.properties
@@ -1,7 +1,7 @@
 spring.application.name=saitenweise-backend
-# Disable DataSource auto-configuration as currently no database is required
-spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration
 # Change the server port to 8081
 server.port=8081
 # Enable pretty JSON output
 spring.jackson.serialization.indent-output=true
+# only update DB schema (keep existing data)
+spring.jpa.hibernate.ddl-auto=update
\ No newline at end of file
diff --git a/src/test/java/de/htwg/in/schneider/saitenweise/backend/SaitenweiseBackendApplicationTests.java b/src/test/java/de/htwg/in/schneider/saitenweise/backend/SaitenweiseBackendApplicationTests.java
index 0e00ebc..47f5abe 100644
--- a/src/test/java/de/htwg/in/schneider/saitenweise/backend/SaitenweiseBackendApplicationTests.java
+++ b/src/test/java/de/htwg/in/schneider/saitenweise/backend/SaitenweiseBackendApplicationTests.java
@@ -2,8 +2,10 @@ package de.htwg.in.schneider.saitenweise.backend;
 
 import org.junit.jupiter.api.Test;
 import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.test.context.ActiveProfiles;
 
 @SpringBootTest
+@ActiveProfiles("test")
 class SaitenweiseBackendApplicationTests {
 
 	@Test
